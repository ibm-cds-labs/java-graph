package com.ibm.graph.client.response;

import com.ibm.graph.client.exception.GraphClientException;

import com.ibm.graph.client.response.HTTPStatusInfo;
import com.ibm.graph.client.response.GraphStatusInfo;
import com.ibm.graph.client.response.ResultSet;

import org.apache.wink.json4j.JSONArray;
import org.apache.wink.json4j.JSONObject;
import org.apache.wink.json4j.JSONException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Encapsulates the information that was received in response to a request to an IBM Graph service instance.
 * The response was either generated by the IBM Graph engine or the web server.
 *
 */
public class GraphResponse {
	
   	private static Logger logger =  LoggerFactory.getLogger(GraphResponse.class);

	private HTTPStatusInfo httpStatus = null;
	private GraphStatusInfo graphStatus = null;
	private String httpResponseBody = null;
	private ResultSet resultSet = null;

	/**
	 * Constructor. Creates an instance of GraphResponse, encapsulating the response information for a request that was
	 * sent to IBM Graph.
	 * @param status HTTP status information, such as status code (e.g. 200) and reason (OK)
	 * @param body HTTP body, which can be plain text or formatted as JSON, XML, etc
	 * @throws GraphClientException the HTTP body contains data that cannot be interpreted
	 * @throws IllegalArgumentException status is null
	 */
	public GraphResponse(HTTPStatusInfo status, String body) throws GraphClientException, IllegalArgumentException {
		if(status == null)
			throw new IllegalArgumentException("HTTP response information is missing.");

		this.httpStatus = status;
		// not every HTTP response contains a body
		if((body != null) && (body.trim().length() > 0))
			this.httpResponseBody = body;			
		else
			this.httpResponseBody = "";

		if(logger.isDebugEnabled()) {
			logger.debug("HTTP response: " + this.httpStatus.toString());	
			logger.debug("HTTP response body: " + this.httpResponseBody);	
		}
		
		if(this.httpStatus.isSuccessStatus()) {
			// HTTP status indicates that the Graph request was processed without issues
			// if the response body is not empty it should should be valid JSON
			try {
				if(this.httpResponseBody.length() > 0) {
					JSONObject jsonResponse = new JSONObject(this.httpResponseBody);
					// set Graph status information (code and message)
					this.graphStatus = GraphStatusInfo.fromJSONObject(jsonResponse);
					// create ResultSet object
					this.resultSet = new ResultSet(jsonResponse);	
				}
			} 
			catch(GraphClientException gcex) {
				// result set processing failed
				throw gcex;
			}			
			catch(JSONException jsonex) {
				// the response body is not json
				throw new GraphClientException("IBM Graph response with HTTP code \"" + this.httpStatus.getStatusCode() + "\" and message body " + this.httpResponseBody + "\" cannot be analyzed because it is not valid JSON.", jsonex);
			}
			catch(Exception ex) {
				// propagate error information
				throw new GraphClientException("IBM Graph response with HTTP code \"" + this.httpStatus.getStatusCode() + "\" and message body " + this.httpResponseBody + "\" cannot be analyzed.", ex);
			}
		}
		else {
			if(this.httpStatus.isClientErrorStatus()) {
				// HTTP status indicates that the Graph request failed to an issue caused by the client
				// if the response body is not empty it should should be valid JSON
				try {
					// sample IBM Graph responses: 
					//	{"code":"BadRequestError","message":"bad request: outV=null, inV=null, label=null"}
					// 	{"code":"NotFoundError","message":"graph not found"}
					this.graphStatus = GraphStatusInfo.fromJSONObject(new JSONObject(this.httpResponseBody));
					// no result set will be provided	
				} 
				catch(JSONException jsonex) {
					// the response body is not json
					throw new GraphClientException("IBM Graph response with HTTP code \"" + this.httpStatus.getStatusCode() + "\" and message body " + this.httpResponseBody + "\" cannot be analyzed because it is not valid JSON.", jsonex);
				}	
			}
			else {
				// generic server responses that we can't parse
				// - don't set Graph status information
				// - don't set ResultSet
				// Leave it up to the caller to analyze the response body to determine how to handle this situation			
			}
		}
	}

	/**
	 * @return HTTP status information from this IBM Graph service response. Never null.
	 */ 
	public HTTPStatusInfo getHTTPStatus() {
		return this.httpStatus;
	}

	/**
	 * @return boolean true if the Graph service request that triggered this response yielded a result set.
	 */ 
	public boolean hasResultSet() {
		return (this.resultSet != null);
	}

	/**
	 * @return ResultSet the response's result set, if one if available
	 */ 
	public ResultSet getResultSet() {
		return this.resultSet;
	}

	/**
	 * Returns the IBM Graph engine status code and message for this request. Null is returned if the response was generated by the IBM Graph web server
	 * for example if an internal server error occured.
	 * @return GraphStatusInfo IBM Graph engine status code and message or null, if not set
	 */ 
	public GraphStatusInfo getGraphStatus() {
		return this.graphStatus;
	}

	/**
	 * Returns the raw response body that was received by the IBM Graph web server. 
	 * @return String the response body or an empty string if the response did not include a body.
	 */ 
	public String getResponseBody() {
		return this.httpResponseBody;
	}

	public String toString() {
		StringBuffer buff = new StringBuffer(this.httpStatus.toString() + " ");
		if(this.graphStatus != null)
			buff.append(this.graphStatus.toString() + " ");
		if(this.resultSet != null)
			buff.append(this.resultSet.toString() + " ");		
		buff.append("HTTP response body: \"this.getResponseBody\"");
		return buff.toString();
	}
}